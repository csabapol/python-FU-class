{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis in Action - EDA: Targets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section we explore the [_Arial Bombing Data Set_](https://www.kaggle.com/usaf/world-war-ii) and apply techniques referred to as __Exploratory Data Analysis__."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Import statements**\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Global settings**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.max_rows = 999\n",
    "pd.options.display.max_columns = 100\n",
    "plt.rcParams[\"figure.figsize\"] = [15,6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Load data set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "gdf_europe = pickle.load( open( \"../data/gdf_europe\", \"rb\" ) )\n",
    "europe = pickle.load( open( \"../data/europe.p\", \"rb\" ) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Research questions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__@Targets__\n",
    "- Q1: Which cities were the 15 most frequent targets?\n",
    "- Q2: How much high explosives (in tons) went down on the 25 most frequent targets?\n",
    "- Q3: How did the aerial attacks change over time for the 15 most frequent targeted cities?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tar = gdf_europe.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mission ID</th>\n",
       "      <th>Mission Date</th>\n",
       "      <th>Country</th>\n",
       "      <th>Aircraft Series</th>\n",
       "      <th>Target Country</th>\n",
       "      <th>Target City</th>\n",
       "      <th>Target Type</th>\n",
       "      <th>Target Industry</th>\n",
       "      <th>Target Latitude</th>\n",
       "      <th>Target Longitude</th>\n",
       "      <th>Attacking Aircraft</th>\n",
       "      <th>High Explosives Weight (Tons)</th>\n",
       "      <th>Total Weight (Tons)</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>Altitude (meters)</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1943-08-15</td>\n",
       "      <td>USA</td>\n",
       "      <td>A36</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>SPADAFORA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.22</td>\n",
       "      <td>15.37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1943</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (15.37000 38.22000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1943-08-15</td>\n",
       "      <td>USA</td>\n",
       "      <td>A36</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>COSENZA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.27</td>\n",
       "      <td>16.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1943</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (16.25000 39.27000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1943-08-15</td>\n",
       "      <td>USA</td>\n",
       "      <td>A36</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>GIOJA TAURO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.43</td>\n",
       "      <td>15.90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1943</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (15.90000 38.43000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1943-08-15</td>\n",
       "      <td>USA</td>\n",
       "      <td>A36</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>SCILLA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.23</td>\n",
       "      <td>15.72</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1943</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (15.72000 38.23000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1943-08-15</td>\n",
       "      <td>USA</td>\n",
       "      <td>A36</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>GIOJA TAURO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ARMAMENT AND ORDNANCE PLANTS</td>\n",
       "      <td>38.43</td>\n",
       "      <td>15.90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1943</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (15.90000 38.43000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178198</th>\n",
       "      <td>178660</td>\n",
       "      <td>1945-02-15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>B25</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>SPILIMBERGO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SUPPLY DUMPS AND WAREHOUSES</td>\n",
       "      <td>46.10</td>\n",
       "      <td>12.90</td>\n",
       "      <td>18.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>3810.0</td>\n",
       "      <td>POINT (12.90000 46.10000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178199</th>\n",
       "      <td>178661</td>\n",
       "      <td>1945-02-15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>B25</td>\n",
       "      <td>ITALY</td>\n",
       "      <td>SPILIMBERGO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SUPPLY DUMPS AND WAREHOUSES</td>\n",
       "      <td>46.10</td>\n",
       "      <td>12.90</td>\n",
       "      <td>18.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>3810.0</td>\n",
       "      <td>POINT (12.90000 46.10000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178200</th>\n",
       "      <td>178662</td>\n",
       "      <td>1945-02-15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>B24</td>\n",
       "      <td>HUNGARY</td>\n",
       "      <td>ARAD</td>\n",
       "      <td>NaN</td>\n",
       "      <td>\"RR INSTALLATIONS,  TRACKS,  MARSHALLING YARDS...</td>\n",
       "      <td>46.18</td>\n",
       "      <td>21.32</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (21.32000 46.18000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178201</th>\n",
       "      <td>178663</td>\n",
       "      <td>1945-02-15</td>\n",
       "      <td>GREAT BRITAIN</td>\n",
       "      <td>LIB</td>\n",
       "      <td>GREECE</td>\n",
       "      <td>ABBAZIA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.32</td>\n",
       "      <td>14.28</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (14.28000 45.32000)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178202</th>\n",
       "      <td>178664</td>\n",
       "      <td>1945-02-15</td>\n",
       "      <td>GREAT BRITAIN</td>\n",
       "      <td>LIB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FIUME OIL REFINERY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.33</td>\n",
       "      <td>14.43</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>221.5</td>\n",
       "      <td>1945</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>POINT (14.43000 45.33000)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120068 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Mission ID Mission Date        Country Aircraft Series Target Country  \\\n",
       "0                1   1943-08-15            USA             A36          ITALY   \n",
       "2                3   1943-08-15            USA             A36          ITALY   \n",
       "3                4   1943-08-15            USA             A36          ITALY   \n",
       "8                9   1943-08-15            USA             A36          ITALY   \n",
       "9               10   1943-08-15            USA             A36          ITALY   \n",
       "...            ...          ...            ...             ...            ...   \n",
       "178198      178660   1945-02-15            NaN             B25          ITALY   \n",
       "178199      178661   1945-02-15            NaN             B25          ITALY   \n",
       "178200      178662   1945-02-15            NaN             B24        HUNGARY   \n",
       "178201      178663   1945-02-15  GREAT BRITAIN             LIB         GREECE   \n",
       "178202      178664   1945-02-15  GREAT BRITAIN             LIB            NaN   \n",
       "\n",
       "               Target City Target Type  \\\n",
       "0                SPADAFORA         NaN   \n",
       "2                  COSENZA         NaN   \n",
       "3              GIOJA TAURO         NaN   \n",
       "8                   SCILLA         NaN   \n",
       "9              GIOJA TAURO         NaN   \n",
       "...                    ...         ...   \n",
       "178198         SPILIMBERGO         NaN   \n",
       "178199         SPILIMBERGO         NaN   \n",
       "178200                ARAD         NaN   \n",
       "178201             ABBAZIA         NaN   \n",
       "178202  FIUME OIL REFINERY         NaN   \n",
       "\n",
       "                                          Target Industry  Target Latitude  \\\n",
       "0                                                     NaN            38.22   \n",
       "2                                                     NaN            39.27   \n",
       "3                                                     NaN            38.43   \n",
       "8                                                     NaN            38.23   \n",
       "9                            ARMAMENT AND ORDNANCE PLANTS            38.43   \n",
       "...                                                   ...              ...   \n",
       "178198                        SUPPLY DUMPS AND WAREHOUSES            46.10   \n",
       "178199                        SUPPLY DUMPS AND WAREHOUSES            46.10   \n",
       "178200  \"RR INSTALLATIONS,  TRACKS,  MARSHALLING YARDS...            46.18   \n",
       "178201                                                NaN            45.32   \n",
       "178202                                                NaN            45.33   \n",
       "\n",
       "        Target Longitude  Attacking Aircraft  High Explosives Weight (Tons)  \\\n",
       "0                  15.37                 NaN                           10.0   \n",
       "2                  16.25                 NaN                            9.0   \n",
       "3                  15.90                 NaN                            7.5   \n",
       "8                  15.72                 NaN                            0.0   \n",
       "9                  15.90                 NaN                            0.0   \n",
       "...                  ...                 ...                            ...   \n",
       "178198             12.90                18.0                           36.0   \n",
       "178199             12.90                18.0                           36.0   \n",
       "178200             21.32                 1.0                            2.0   \n",
       "178201             14.28                 1.0                            NaN   \n",
       "178202             14.43                68.0                            NaN   \n",
       "\n",
       "        Total Weight (Tons)  year  month  day  Altitude (meters)  \\\n",
       "0                      10.0  1943      8   15                NaN   \n",
       "2                       9.0  1943      8   15                NaN   \n",
       "3                       7.5  1943      8   15                NaN   \n",
       "8                       0.0  1943      8   15                NaN   \n",
       "9                       0.0  1943      8   15                NaN   \n",
       "...                     ...   ...    ...  ...                ...   \n",
       "178198                 36.0  1945      2   15             3810.0   \n",
       "178199                 36.0  1945      2   15             3810.0   \n",
       "178200                  2.0  1945      2   15                NaN   \n",
       "178201                  3.0  1945      2   15                NaN   \n",
       "178202                221.5  1945      2   15                NaN   \n",
       "\n",
       "                         geometry  \n",
       "0       POINT (15.37000 38.22000)  \n",
       "2       POINT (16.25000 39.27000)  \n",
       "3       POINT (15.90000 38.43000)  \n",
       "8       POINT (15.72000 38.23000)  \n",
       "9       POINT (15.90000 38.43000)  \n",
       "...                           ...  \n",
       "178198  POINT (12.90000 46.10000)  \n",
       "178199  POINT (12.90000 46.10000)  \n",
       "178200  POINT (21.32000 46.18000)  \n",
       "178201  POINT (14.28000 45.32000)  \n",
       "178202  POINT (14.43000 45.33000)  \n",
       "\n",
       "[120068 rows x 18 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Q1: Which cities were the 15 most frequent targets?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1: Which cities were the 15 most frequent targets?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Q1: Which cities were the 15 most frequent targets?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Target City</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BERLIN</th>\n",
       "      <td>2546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HAMBURG</th>\n",
       "      <td>1951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COLOGNE</th>\n",
       "      <td>1907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BREMEN</th>\n",
       "      <td>1880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KIEL</th>\n",
       "      <td>1281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KASSEL</th>\n",
       "      <td>1231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MUNICH</th>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MERSEBURG</th>\n",
       "      <td>1003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRANKFURT AM MAIN</th>\n",
       "      <td>970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BREST</th>\n",
       "      <td>968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HANNOVER</th>\n",
       "      <td>910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VIENNA</th>\n",
       "      <td>883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MANNHEIM</th>\n",
       "      <td>855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LUDWIGSHAFEN</th>\n",
       "      <td>826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ESSEN</th>\n",
       "      <td>810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count\n",
       "Target City             \n",
       "BERLIN              2546\n",
       "HAMBURG             1951\n",
       "COLOGNE             1907\n",
       "BREMEN              1880\n",
       "KIEL                1281\n",
       "KASSEL              1231\n",
       "MUNICH              1005\n",
       "MERSEBURG           1003\n",
       "FRANKFURT AM MAIN    970\n",
       "BREST                968\n",
       "HANNOVER             910\n",
       "VIENNA               883\n",
       "MANNHEIM             855\n",
       "LUDWIGSHAFEN         826\n",
       "ESSEN                810"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## your code here ...\n",
    "\n",
    "frequent_targets = df_tar.groupby('Target City')['Target City'].agg(['count']).sort_values('count', ascending = False).head(15)\n",
    "frequent_targets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Q2: How much high explosives (in tons) went down on the 25 most frequent targets?**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target City</th>\n",
       "      <th>count</th>\n",
       "      <th>count_bombs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>840</th>\n",
       "      <td>BERLIN</td>\n",
       "      <td>2546.0</td>\n",
       "      <td>65504.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2062</th>\n",
       "      <td>HAMBURG</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>51343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1312</th>\n",
       "      <td>COLOGNE</td>\n",
       "      <td>1907.0</td>\n",
       "      <td>44159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>BREMEN</td>\n",
       "      <td>1880.0</td>\n",
       "      <td>35293.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2319</th>\n",
       "      <td>KIEL</td>\n",
       "      <td>1281.0</td>\n",
       "      <td>32116.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2288</th>\n",
       "      <td>KASSEL</td>\n",
       "      <td>1231.0</td>\n",
       "      <td>27200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2999</th>\n",
       "      <td>MUNICH</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>28321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2810</th>\n",
       "      <td>MERSEBURG</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>31156.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1822</th>\n",
       "      <td>FRANKFURT AM MAIN</td>\n",
       "      <td>970.0</td>\n",
       "      <td>27664.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>BREST</td>\n",
       "      <td>968.0</td>\n",
       "      <td>23870.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2072</th>\n",
       "      <td>HANNOVER</td>\n",
       "      <td>910.0</td>\n",
       "      <td>23785.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4391</th>\n",
       "      <td>VIENNA</td>\n",
       "      <td>883.0</td>\n",
       "      <td>35075.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2713</th>\n",
       "      <td>MANNHEIM</td>\n",
       "      <td>855.0</td>\n",
       "      <td>20461.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2651</th>\n",
       "      <td>LUDWIGSHAFEN</td>\n",
       "      <td>826.0</td>\n",
       "      <td>19398.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1648</th>\n",
       "      <td>ESSEN</td>\n",
       "      <td>810.0</td>\n",
       "      <td>29671.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4546</th>\n",
       "      <td>WILHELMSHAVEN</td>\n",
       "      <td>793.0</td>\n",
       "      <td>14952.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1545</th>\n",
       "      <td>DUSSELDORF</td>\n",
       "      <td>792.0</td>\n",
       "      <td>15801.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1029</th>\n",
       "      <td>BRUNSWICK</td>\n",
       "      <td>755.0</td>\n",
       "      <td>22182.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>45 00 N 010 40 E</td>\n",
       "      <td>741.0</td>\n",
       "      <td>577.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>GELSENKIRCHEN</td>\n",
       "      <td>723.0</td>\n",
       "      <td>32279.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1604</th>\n",
       "      <td>EMDEN</td>\n",
       "      <td>699.0</td>\n",
       "      <td>8033.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>DUISBURG</td>\n",
       "      <td>676.0</td>\n",
       "      <td>22979.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2676</th>\n",
       "      <td>MAGDEBURG</td>\n",
       "      <td>672.0</td>\n",
       "      <td>18067.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3001</th>\n",
       "      <td>MUNSTER</td>\n",
       "      <td>596.0</td>\n",
       "      <td>14687.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1502</th>\n",
       "      <td>DORTMUND</td>\n",
       "      <td>547.0</td>\n",
       "      <td>29983.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Target City   count  count_bombs\n",
       "840              BERLIN  2546.0      65504.0\n",
       "2062            HAMBURG  1951.0      51343.0\n",
       "1312            COLOGNE  1907.0      44159.0\n",
       "982              BREMEN  1880.0      35293.0\n",
       "2319               KIEL  1281.0      32116.0\n",
       "2288             KASSEL  1231.0      27200.0\n",
       "2999             MUNICH  1005.0      28321.0\n",
       "2810          MERSEBURG  1003.0      31156.0\n",
       "1822  FRANKFURT AM MAIN   970.0      27664.0\n",
       "996               BREST   968.0      23870.0\n",
       "2072           HANNOVER   910.0      23785.0\n",
       "4391             VIENNA   883.0      35075.0\n",
       "2713           MANNHEIM   855.0      20461.0\n",
       "2651       LUDWIGSHAFEN   826.0      19398.0\n",
       "1648              ESSEN   810.0      29671.0\n",
       "4546      WILHELMSHAVEN   793.0      14952.0\n",
       "1545         DUSSELDORF   792.0      15801.0\n",
       "1029          BRUNSWICK   755.0      22182.0\n",
       "172    45 00 N 010 40 E   741.0        577.0\n",
       "1891      GELSENKIRCHEN   723.0      32279.0\n",
       "1604              EMDEN   699.0       8033.0\n",
       "1525           DUISBURG   676.0      22979.0\n",
       "2676          MAGDEBURG   672.0      18067.0\n",
       "3001            MUNSTER   596.0      14687.0\n",
       "1502           DORTMUND   547.0      29983.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## your code here ...\n",
    "#df_tar.groupby('Target City')[('count', 'High Explosives Weight (Tons)')].count()#.agg(['count']).sort_values('count', ascending = False)\n",
    "#df_tar.groupby('Target City')[('Target City', 'High Explosives Weight (Tons)')].transform(lambda x: np.arange(1, len(x)+1))\n",
    "\n",
    "\n",
    "df_tar['count'] =  df_tar.groupby('Target City')['Target City'].transform('count')\n",
    "\n",
    "df_tar['count_bombs'] =  df_tar.groupby('Target City')['High Explosives Weight (Tons)'].transform('sum')\n",
    "\n",
    "\n",
    "df_bomb_test = df_tar.groupby('Target City')[['count', 'count_bombs']].first().reset_index().sort_values('count', ascending = False).head(25)\n",
    "df_bomb_test\n",
    "\n",
    "\n",
    "#bombed_cities_list = list(df_bomb_test.index)\n",
    "\n",
    "#bombed_cities_index = [i for i in range(len(bombed_cities_list))]\n",
    "\n",
    "\n",
    "#series_bomb_test = pd.Series(bombed_cities_list, index = bombed_cities_index)\n",
    "\n",
    "\n",
    "#df_bomb_test2 = df_tar[\"Target City\"].isin(citiesBombList)\n",
    "#df_bombs = df_tar[df_bomb_test2]\n",
    "\n",
    "#df_bombs_new = df_bombs[[\"Target City\", \"count_bombs\"]].copy()\n",
    "#df_bombs_new.drop_duplicates()\n",
    "\n",
    "\n",
    "#df_bomb_new = df_bombs.groupby('Target City')['High Explosives Weight (Tons)']\n",
    "#df_bombs\n",
    "\n",
    "#series_bomb_test.columns\n",
    "\n",
    "#pd.concat([series_bomb_test, df_bomb_new], axis = 1)\n",
    "\n",
    "#df_tar.groupby('count')['Target City'].sort_values('count', ascending = False).head(1)\n",
    "\n",
    "#df_tar_dummy = df_tar.copy()\n",
    "#df_tar_dummy.set_index([\"Target City\"], inplace = True, append = True, drop = True) \n",
    "\n",
    "#df_tar_dummy.reset_index(inplace = True) \n",
    "\n",
    "#df_test2 = df_tar_dummy.groupby('Target City')[('level_0', 'count')].first().sort_values('count', ascending = False).head(25)#.reset_index(inplace= True)#.sort_values('count', ascending = False).head(25)\n",
    "#df_test2.reset_index(inplace = True)\n",
    "#df_tar_dummy.groupby('Target City')['count'].first().reset_index()#.sort_values('count', ascending = False).head(25)\n",
    "#df_tar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['BERLIN',\n",
       " 'HAMBURG',\n",
       " 'COLOGNE',\n",
       " 'BREMEN',\n",
       " 'KIEL',\n",
       " 'KASSEL',\n",
       " 'MUNICH',\n",
       " 'MERSEBURG',\n",
       " 'FRANKFURT AM MAIN',\n",
       " 'BREST',\n",
       " 'HANNOVER',\n",
       " 'VIENNA',\n",
       " 'MANNHEIM',\n",
       " 'LUDWIGSHAFEN',\n",
       " 'ESSEN']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df_tar.groupby('Target City')[['count', 'count_bombs']].first().reset_index().sort\n",
    "list(df_bomb_test[\"Target City\"].head(15))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Q3: How did the aerial attacks change over time for the 15 most frequent targeted cities?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frequencies')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## your code here ...\n",
    "#frequent_targets\n",
    "#df_tar\n",
    "\n",
    "bombed_cities_list = list(df_bomb_test[\"Target City\"].head(15))\n",
    "\n",
    "neue_spalte = df_tar[\"Target City\"].isin(bombed_cities_list)\n",
    "\n",
    "df_change_overtime = df_tar[df_tar[\"Target City\"].isin(bombed_cities_list)]\n",
    "\n",
    "\n",
    "\n",
    "df_change_overtime.groupby([\"Target City\", \"year\"])[\"Target City\"].size().unstack().plot(kind = \"bar\", stacked = True)\n",
    "\n",
    "plt.xlabel(\"Target Cities\", size = 14)\n",
    "plt.ylabel(\"Frequencies\", size = 14)\n",
    "\n",
    "#df_change.groupby(\"year\")[\"Target City\"].count().plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
